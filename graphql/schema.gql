type Person {
  id: ID!
  name: String!
}

type Restaurant {
  id: ID!
  name: String!
}

type Review {
  id: ID!
  text: String!
  rating: String!
  timeStamp: String!
  helpfulnessRating: String!
}

input PersonInput {
  userId: String!
  name: String!
  location: String!
}

input RestaurantInput {
  name: String!
  location: String!
  cuisine: String!
}

input FriendInput { 
  userId: String!
  friendId: String
}

input ReviewInput {
  userId: String!
  text: String!
  rating: String!
  restaurantId: String!
  cuisineId: String!
}

input RateReviewInput {
  userId: String!
  like: Boolean!
  reviewId: String!
}

type Query {
  getUsers: [Person]
  getFriends(userId: String!) : [Person]
  getFriendsOfFriends(userId: String!) : [Person]
  getRelationWithUser(userId: String!, otherUserId: String!) : String
  getHighestRatedResturantWithCuisine(userId: String!, cuisineName: String!) : Restaurant
  getTopTenRestaurantsNearMe(userId: String!) : [Restaurant]
  getRecentReviews(restaurantId: String!) : [Review]
  getRecommendedRestaurants(userId: String!) : [Restaurant]
  getRestaurantsForMeBasedOnFriendsRatings(userId: String!) : [Restaurant]
  getReviewdRatedRestaurantsByMyFriends(userId: String!, days: Int!) : [Restaurant]
}

type Mutation {
  addUser(person: PersonInput!): Person
  addRestaurant(restaurant: RestaurantInput!) : Restaurant
  addFriend(friend: FriendInput!) : String
  addReview(review: ReviewInput!) : Review
  rateReview(ratereview: RateReviewInput!) : String
}